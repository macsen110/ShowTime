webpackJsonp([7],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Created by wudi on 15/11/30.
	 */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3),__webpack_require__(1),__webpack_require__(12),__webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function(RSAUtils, $, ui, host){  
	    //获取openid
	    function getOpenId() {
	        var openId = localStorage.getItem('openId');
	        var openIdValue;
	        if ($('#get_weixin_openId')) {
	            openIdValue = $('#get_weixin_openId').val();
	        }
	        if (openIdValue) {
	            openId = openId == openIdValue ? openId : openIdValue; 
	            localStorage.setItem('openId', openId);
	        }
	        return openId;
	    }
	    //格式化日期
	    function formatDate() {
	    	var date = new Date();
	    	var format = "yyyy-MM-dd HH:mm:ss";
	        switch(typeof date) {   
	            case "string":   
	                date = new Date(date.replace(/-/, "/"));   
	                break;   
	            case "number":   
	                date = new Date(date);   
	                break;   
	        }    
	        if (!date instanceof Date) return;   
	        var dict = {   
	            "yyyy": date.getFullYear(),   
	            "M": date.getMonth() + 1,   
	            "d": date.getDate(),   
	            "H": date.getHours(),   
	            "m": date.getMinutes(),   
	            "s": date.getSeconds(),   
	            "MM": ("" + (date.getMonth() + 101)).substr(1),   
	            "dd": ("" + (date.getDate() + 100)).substr(1),   
	            "HH": ("" + (date.getHours() + 100)).substr(1),   
	            "mm": ("" + (date.getMinutes() + 100)).substr(1),   
	            "ss": ("" + (date.getSeconds() + 100)).substr(1)   
	        };       
	        return format.replace(/(yyyy|MM?|dd?|HH?|ss?|mm?)/g, function() {   
	            return dict[arguments[0]];   
	        });                  
	    }
	    //加密字符串
	    function encryptedString(publicKey) {
	        var key = RSAUtils.getKeyPair(publicKey.publicExponent, '',
	                publicKey.modulus);
	        var current = formatDate();
	        var openId = APP.uid + ',' + current;
	        var token = RSAUtils.encryptedString(key, openId);
	        return token;
	    }
	    //验证如果不是从首页跳转过来的,直接跳转到首页入口
	    //var pageName = $('body').data('page');
	    var BASE = {
	        cbPathObj: function () {
	            var query = location.search;
	            if ('pageName' in this.getLocationParam(query))  {
	                var cbPathObj = this.getLocationParam(query);
	                if (cbPathObj.pageName !== 'index') return cbPathObj
	            }
	            return undefined;
	        },
	        setPath: function (obj) {
	            var path = location.pathname;
	            //var query = location.search ? this.removeOldPath(location.search) + 'PATHNAME=' + pathName : '?PATHNAME='+pathName;
	            //return path + query;
	            delete obj.replace;
	            return path + '?' + this.serializeObj(obj)
	        },
	        serializeObj: function (options) {
	            var arr = [];
	            for (var i in options) {
	                arr.push(i+'='+options[i]);				
	            }
	            return arr.join('&');
	        },
	        getLocationParam: function (url) {
	            var params = url.toString().slice(1).split("&");
	            var returnObject = {};
	            for(var i = 0; i != params.length; i++) {
	                var index = params[i].indexOf("=");
	                returnObject[params[i].slice(0, index)] = params[i].slice(index+1);
	            }
	            return returnObject;
	        }
	    }
	        
	    window.STORE = {
	        pages: {
	            index: function (stateObj) {
	                __webpack_require__.e/* nsure */(5, function() { 
	                    var component = __webpack_require__(14);
	                    if (STORE.curPathName == stateObj.pageName) component.init(stateObj);
	                });
	            },
	            profile: function (stateObj) {
	                __webpack_require__.e/* nsure */(4, function() { 
	                    var component = __webpack_require__(15);
	                    if (STORE.curPathName == stateObj.pageName) component.init(stateObj);
	                     
	                });    
	            },
	            antenatal: function (stateObj) {
	                __webpack_require__.e/* nsure */(6, function() { 
	                    var component = __webpack_require__(13);
	                    if (STORE.curPathName == stateObj.pageName) component.init(stateObj);
	                });
	            },
	            waiting_doctor: function (stateObj) {
	                __webpack_require__.e/* nsure */(1, function() { 
	                    var component = __webpack_require__(18);
	                    if (STORE.curPathName == stateObj.pageName) component.init(stateObj);
	                });
	            },
	            report: function (stateObj) {
	                __webpack_require__.e/* nsure */(3, function () {
	                    var component = __webpack_require__(16);
	                    if (STORE.curPathName == stateObj.pageName) component.init(stateObj);
	                })
	            },
	            report_list: function (stateObj) {
	                __webpack_require__.e/* nsure */(2/* empty */, function () {
	                    var component = __webpack_require__(17);
	                    if (STORE.curPathName == stateObj.pageName) component.init(stateObj);
	                })            
	            }        
	        },
	        setRouter: function (stateObj, component) {
	            if (!stateObj.urlAction) {
	                if (stateObj.replace) history.replaceState(stateObj, '', BASE.setPath(stateObj));
	                else history.pushState(stateObj, '', BASE.setPath(stateObj));
	            }
	            this.updatePageView(component)
	        },
	        updatePageView: function (component) {
	            this.endLoading();
	            if (this.curPathWidget) this.curPathWidget.destroy();
	            this.curPathWidget = component;            
	        },
	        curPathWidget: undefined,
	        curPathName: undefined,
	        cbPathObj: BASE.cbPathObj(),
	        gotoPage: function (stateObj) {
	            this.curPathName = stateObj.pageName;
	            this.startLoading();
	            this.pages[stateObj.pageName](stateObj);            
	        },
	        startLoading: function () {
	            var $loading = $('.widget-loading');
	            $loading.show()
	        },
	        endLoading: function () {
	            var $loading = $('.widget-loading');
	            $loading.hide()
	        },
	        initJump: function () {
	            var stateObj = {};
	            if (this.cbPathObj) stateObj = this.cbPathObj;
	            else stateObj.pageName = 'antenatal';
	            stateObj.replace = 1;
	            this.gotoPage(stateObj);
	            this.cbPath = null;
	        }
	    }
	    window.onpopstate = function (event) {
	        var stateObj = event.state;
	        stateObj.urlAction = 1;
	        STORE.gotoPage(stateObj)
	    }
	    window.APP = {
	        host: host,
	        ui: ui,
	        uid: getOpenId(),
	        init: function () {
	            this.bindLocation();
	            this.isBandCard()
	        },
	        isBandCard: isBandCard,
	        bindLocation: function () {
	           // var search = location.search ? location.search : '?ds=ds';
	            var self = this;
	            var isMove = false;
	            //解决ios 下delegate 不能点击bug
	            var tapEvent = 'ontouchstart' in window ? 'touchend' : 'click';
	            document.body.addEventListener('touchmove', function () {
	                isMove = true;
	            })
	            document.body.addEventListener(tapEvent, function (e) {
	                var bindLocationDom = self.getDomByEle(e.target, '.bind-location');
	                if (bindLocationDom) {
	                    if (bindLocationDom.dataset.href) {
	                        if (!isMove) {
	                            var stateObj = {};
	                            if (bindLocationDom.dataset.options) {
	                                stateObj = JSON.parse(bindLocationDom.dataset.options);
	                            }
	                            stateObj.pageName = bindLocationDom.dataset.href;
	                            STORE.gotoPage(stateObj, {})
	                        }
	                        else isMove = false;
	                    }
	                }
	            })
	        },
	        getDomByEle: function (curentEl, selector) {
	            var sign = selector[0];
	            function getId() {
	                while (curentEl) {
	                    if (curentEl.id === selector.slice(1)) return curentEl
	                        curentEl = curentEl.parentNode;
	                }
	                return undefined
	            }
	            function getClass() {
	                while (curentEl) {
	                    if (curentEl.classList && curentEl.classList.contains(selector.slice(1))) return curentEl;
	                    curentEl = curentEl.parentNode;
	                }
	                return undefined
	            }
	            function getEleName() {
	                while (curentEl) {
	                if (curentEl.tagName === selector.toUpperCase()) return curentEl;
	                curentEl = curentEl.parentNode;
	                }
	                return undefined
	            }
	            switch (sign) {
	                case '.':
	                    return getClass()
	                case '#':
	                    return getId()
	                default:        
	                    return getEleName();
	            }
	        },
	        tools: {
	            encryptedString: encryptedString
	        },
	        profileInfo: {},
	        saveProfileInfo: function (status, response) {
	            if (status == 1) {
	                APP.profileInfo.emStatus = status;
	                STORE.initJump();
	            }
	            else {
	                if (response.cardList.length > 1) {
	                    selectCardNo(response.cardList, function (card) {
	                        response.cardNo = card;
	                        APP.profileInfo = response;
	                        localStorage.setItem('profileInfo', JSON.stringify(response));
	                        STORE.initJump();
	                    })
	                }
	                else {
	                    response.cardNo = response.cardList[0];
	                    APP.profileInfo = response;
	                    localStorage.setItem('profileInfo', JSON.stringify(response))
	                    STORE.initJump();
	                }                        
	            }
	        }
	    }
	    

	    
	    function isBandCard(curRouteCb) {
	        if (localStorage.getItem('yfyPublic')) {
	        	var token = encryptedString(JSON.parse(localStorage.getItem('yfyPublic')));
	            var data = {
	                uid : APP.uid,
	                token : token
	            }
	            //如果localStroge中存在个人信息的缓存并且uid相同,
	            //证明用户已绑卡,优先使用
	            //如果此用户未绑卡,优先从sessionStorage中获取
	            if (localStorage.getItem('profileInfo')) {
	                var profileInfo = JSON.parse(localStorage.getItem('profileInfo'));
	                if (profileInfo.uid === APP.uid) {
	                    console.log(profileInfo.uid);
	                    APP.profileInfo = profileInfo;
	                    STORE.initJump();
	                    return;
	                }
	            }
	            
	            $.ajax({
	                url : APP.host.api + '/infanthospital/getCustomerInfo',
	                data: JSON.stringify(data),
	                cache: true,
	                type : 'post',
	                contentType : 'application/json',
	                success : function(response) {
	                    response = JSON.parse(response);
	                    if (response.status == 0) {
	                        var emStatus = response.emStatus;
	                        if (emStatus == 0) {
	                            STORE.gotoPage({pageName: 'index', replace: 1});
	                            return;
	                        }                        
	                        //当状态为2时,
	                        //获取用户信息,并缓存到localStrage,
	                        if (emStatus == 2 || emStatus == 1) {
	                            APP.saveProfileInfo(emStatus, response);    
	                        }
	                        
	                    }
	                }
	            })
	        }
	        else {
	            $.ajax({
	                url : APP.host.api + '/getPublicKey',
	                type : 'post',
	                contentType : 'application/json',
	                success : function(response) {
	                    localStorage.setItem('yfyPublic', response);
	                    isBandCard()
	                }
	            })
	        }
	    }
	    function selectCardNo(list, cb) {
	        var wrapDiv = document.createElement('div');
	        wrapDiv.className = 'widget-dialog-selectCardNo';
	        var ininerList = '';
	        list.forEach(function (val, index) {
	            ininerList+='<li class="item" data-val='+ val.cardNumber +'>'+
	                '<input id="select-cardNo-'+index+'" name="select-cardNo" type="radio" value='+val.cardNumber+'>'+
	                '<label for="select-cardNo-'+index+'"><em class="key">卡号'+(index+1)+':</em>'+val.cardNumber+'</label>'+
	            '</li>'
	        })
	        
	        wrapDiv.innerHTML = '<div class="mask"></div>'+
	        '<div class="container">'+
	            '<p class="title">请选择当前使用的就诊卡</p>'+
	            '<ul class="list">'+ininerList+'</ul>'+
	            '<p class="btn">确定</p><div>';
	        document.body.appendChild(wrapDiv);
	        var btn = wrapDiv.querySelector('.btn');
	        btn.addEventListener('click', function () {
	            var checkEle = wrapDiv.querySelector('[type="radio"]:checked');
	            if (!checkEle) {
	                alert('请至少勾选一个选型!')
	                return false;
	            }
	            btn.removeEventListener('click', function () {});
	            wrapDiv.parentNode.removeChild(wrapDiv);
	            cb(checkEle.value);    
	        })
	    }
	    APP.init();
	    return {}
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))

/***/ },

/***/ 11:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Created by wudi on 15/12/10.
	 */

	'use strict';

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function (argument) {
	    var urlObj = {
	        dev: {
	            api: 'http://10.6.81.38:8080/'
	        },
	        test1: {
	            api: 'http://10.6.81.45/'
	        },
	        release: {
	            api: ''
	        },
	        local: {
	            api: '/api/yfy'
	        }
	    };
	    var environment = 'local';
	    return urlObj[environment];
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },

/***/ 12:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	    /****************
	    tab 切换插件
	    参数:
	    tabNav:表示tab click item
	    tabCon: 内容区域显示
	    tabNavItems 触发切换的element
	    tabConItems  显示区域的内容elements
	    curIndex 当前显示的index
	    *****/
	    function TabWidget(args) {
	        if(args && ("object" == typeof args)){
	            for(var arg in args){
	                this[arg] = args[arg];
	            }
	        }
	        this.tabNavContainer = this.tabNavContainer || document.querySelector('.tab-nav-container');
	        this.tabConContainer = this.tabConContainer || document.querySelector('.tab-con-container');
	        this.tabNavContainer && (this.tabNavItems = this.tabNavItems || this.tabNavContainer.children);
	        this.tabConContainer && (this.tabConItems = this.tabConItems || this.tabConContainer.children);
	        this.curIdex = this.curIdex || 0;
	        this.init()
	    }

	    TabWidget.prototype = {
	        constructor: TabWidget,
	        init: function () {
	            var self = this;
	            self.change(this.curIdex);
	            if (self.tabNavItems) {
	                [].forEach.call(self.tabNavItems, function (item, index) {
	                    item.addEventListener('click', function () {
	                        if (!this.classList.contains('on')) self.change(index);				
	                    })
	                })            
	            }
	        },
	        change: function(index) {
	            var self = this;
	            if (self.tabNavItems) {
	                [].forEach.call(self.tabNavItems, function (item, i) {
	                    if (i !== index) {
	                        item.classList.remove('on');
	                        self.tabConItems[i].classList.remove('on')
	                    }
	                    else {
	                        item.classList.add('on');
	                        self.tabConItems[i].classList.add('on')
	                    }
	                })

	            }
	            else {
	                [].forEach.call(self.tabConItems, function (item, i) {
	                    if (i !== index) item.classList.remove('on');
	                    else item.classList.add('on');
	                })
	                
	            } 
	            if (self.callback) self.callback(index);           
	        }
	            
	    }
	    /***
	     * *dialog 页面弹框组件
	     * *
	     * *****/    
	    //弹框
	    function Dialog(options) {
	        this.title = null;
	        this.content = null;
	        this.foot = null;
	        this.canMaskClose = true;
	        this.className = ''
	        this.type = 'dialog';
	        this.container = document.createElement('div');
	        this.mask = '<div class="dialog-mask-bg"></div>';
	        this.config(options).open()
	        return this;
	    }
	    Dialog.prototype = {
	        constructor: Dialog,
	        config: function (options) {
	            if (typeof options === 'object') {			
	                for (var i in options) {
	                    this[i] = options[i]
	                }
	            }
	            return this;
	        },
	        handleEvent: function (e) {
	            var target = e.target;
	            var classList = target.classList;
	            
	            //点击遮罩层,不做任何事情,直接摧毁弹框
	            if (classList.contains('dialog-mask-bg')) {
	                this.canMaskClose ? this.close() : null; 			
	                return
	            }
	            //点击确定按钮
	            if (classList.contains('btn-dialog-ok')) {
	                this.afterOk()
	                return
	            }
	            //点击取消按钮,或者关闭的图标
	            if (classList.contains('btn-dialog-cancel') || classList.contains('icon-dialog-cancel')) {
	                this.close()
	            }
	        },
	        open: function() {
	            this.container.className = "widget-dialog "+this.className;
	            this.title = this.title ? '<div class="title">' + this.title + '</div>' :'';
	            this.content = this.content ? '<div class="content">' + this.content + '</div>' : '';
	            this.foot = this.foot ? '<div class="foot">' + this.foot + '</div>' : ''; 
	            this.main = this.title + this.content + this.foot;
	            this.container.innerHTML = '<div class="main">' + this.main + '</div>' + this.mask;
	            var body = document.body;
	            var self = this;
	            body.appendChild(this.container);
	            //remeber do not write like this
	            //this.container.addEventLister('click', this.close) 
	            //this replay for the current object in the event callback functions
	        
	            this.afterOpen();
	        
	            this.container.addEventListener('click',this)
	        
	        },
	        afterOpen: function () {
	            //do something after the dialog open;
	        },
	        afterOk: function () {
	            //default event is destory;
	            this.destory()
	        },
	        close: function () {
	            this.afterClose();
	            this.destory();
	        
	        },
	        afterClose: function () {
	            //do something after the dialog close;
	        },
	        destory: function () {
	            var body = document.body;
	            body.removeChild(this.container);
	        }
	    };
	    /**
	     * *easy Move
	     * *页面滑动插件
	     * *******/
		function easyMove (element, options) {
			var isTouch = 'ontouchstart' in window;
			if (!element) return null;      
			this.element = element;
	        this.parentEle = options.parentEle || this.element;
			this.child = element.children[0]; //选取一个子元素,以便可以随时获取其宽度
			this.length = element.children.length;
	        this.focusIndex = options.focusIndex || 0;
			this.index = options.index || 0; //初始选中元素序号
			this.speed = options.speed || 300; //矫正动画时间ms
			this.offset = options.offset || 0; //选中点偏移
			this.limitBorder = options.limitBorder || false; //滑动后是否会回顶到边界，优先级高于offset
			this.showNum = options.showNum || this.length; //显示的元素个数（可选,只在limitBorder为true时需要）
			this.deltaX = 0;
			this.deltaY = 0;
			this.callback = options.callback || function () {}; //矫正动画完成后的回调函数
	        this.touchMoveCb = options.touchMoveCb || function () {}; //监听动画滑动
			this.hasMoved = false; //是否触发过onTouchMove，用以区分点击与滑动
			if (this.parentEle.addEventListener) {
		  		this.parentEle.addEventListener(isTouch?'touchstart':'mousedown', this, false);
		    	this.element.addEventListener('webkitTransitionEnd', this, false);
		    	this.element.addEventListener('transitionend', this, false);
		    }
		    this.init();
		}
		easyMove.prototype = {
			init: function () {
				var self = this;
				self.element.style.MozTransform = self.element.style.webkitTransform = 'translate3d(' + (-(self.index-self.focusIndex) * self.child.offsetWidth) + 'px,0,0)';
			},
			handleEvent: function (e) {
				var self = this;
		    	switch (e.type) {
		      		case 'mousedown':
		      			self.element.addEventListener('mousemove', self, false);
		   				self.element.addEventListener('mouseup', self, false);
		   				self.element.addEventListener('mouseout', self, false);
		      			self.onTouchStart(e);
						break;
		      		case 'mousemove':
		      			self.onTouchMove(e);
		      			break;
		      		case 'mouseup':
			      		self.element.removeEventListener('mousemove', self, false);
			   			self.element.removeEventListener('mouseup', self, false);
			   			self.element.removeEventListener('mouseout', self, false);
			      		self.onTouchEnd(e);
						break;
		     		case 'mouseout':
		      			self.element.removeEventListener('mousemove', self, false);
		   				self.element.removeEventListener('mouseup', self, false);
		   				self.element.removeEventListener('mouseout', self, false);
		      			self.onTouchEnd(e);
		      			break;
		    		case 'touchstart':
		        		self.parentEle.addEventListener('touchmove', self, false);
		        		self.parentEle.addEventListener('touchend', self, false);
		        		self.onTouchStart(e);
		        		break;
		      		case 'touchmove':
		      			self.onTouchMove(e);
		      			break;
		      		case 'touchend':
		        		self.parentEle.removeEventListener('touchmove', self, false);
		        		self.parentEle.removeEventListener('touchend', self, false);
		      			self.onTouchEnd(e);
		      			break;
		      		case 'webkitTransitionEnd':
		      		case 'msTransitionEnd':
		      		case 'oTransitionEnd':
		      		case 'transitionend': self.transitionEnd(e); break;
		    	}
			},
			onTouchStart: function (e) {
				var self = this;
				self.start = {
					pageX: e.touches[0].pageX,
					pageY: e.touches[0].pageY
				};
				//将动画时间设为0，以便在按下时马上结束尚在进行的动画
				self.element.style.webkitTransition = "-webkit-transform 0ms";
			},
			onTouchMove: function (e) {
				var self = this;
	            
				//若有多个touch或者被缩放则不滑动		
				if(e.touches.length > 1 || e.scale && e.scale !== 1) return;
				self.deltaX = e.touches[0].pageX - self.start.pageX;
				self.deltaY = e.touches[0].pageY - self.start.pageY;
				//判断是否想垂直滑动，若是则不做滑动
				if (Math.abs(self.deltaX) > Math.abs(self.deltaY)) {
					e.preventDefault();
	                if (!self.hasMoved) {
	                    self.touchMoveCb &&  self.touchMoveCb(self.index)   
	                }
					self.element.style.MozTransform = self.element.style.webkitTransform = 'translate3d(' + (self.deltaX - (self.index-self.focusIndex) * self.child.offsetWidth) + 'px,0,0)';
				}
	            
	            
				self.hasMoved = true;
	            
	            
			},
			onTouchEnd: function (e) {
				var self = this;
				if (!self.hasMoved) {
					self.deltaX = 0; //若没有滑动过，则deltaX为0
				}
				self.hasMoved = false;
				//矫正位置到最贴近目标处
				var width = self.child.offsetWidth;
				var targetIndex = -Math.round((self.deltaX - self.index * width)/width);
				targetIndex = self.limitIndex(targetIndex);
				self.autoMove(targetIndex);
	            if (self.callback) {
					var choseId = self.index + self.offset;
					self.callback(self.index);
				}
			},
			transitionEnd: function (e) {
				var self = this;
				
			},
			autoMove: function (targetIndex) {
				var self = this;
				var style = this.element.style;
				var width = self.child.offsetWidth;
		    	style.webkitTransition = "-webkit-transform "+self.speed+"ms";
		    	style.MozTransform = style.webkitTransform = 'translate3d(' + (-targetIndex * width) + 'px,0,0)';
		    	self.index = targetIndex + self.focusIndex;
	            
			},
			move: function (targetIndex) {
				var self = this;
				targetIndex -= self.offset; 
				targetIndex = self.limitIndex(targetIndex);
				var style = this.element.style;
				var width = self.child.offsetWidth;
				style.webkitTransition = "-webkit-transform "+self.speed+"ms";
		    	style.MozTransform = style.webkitTransform = 'translate3d(' + (-targetIndex * width) + 'px,0,0)';
		    	self.index = targetIndex + self.focusIndex;
	            if (self.callback) {
					//var choseId = self.index + self.offset;
					self.callback(self.index);
				}
			},
			limitIndex: function (targetIndex) {
				var self = this;
				if (!self.limitBorder) {
					if (targetIndex < -self.offset) {
						targetIndex = -self.offset;	
					} else if (targetIndex > self.length - 1 - self.offset) {
						targetIndex = self.length - 1 - self.offset;
						console.log(targetIndex)
					}
				} else {
					if (targetIndex < 0) {
						targetIndex = 0;
					} else if (targetIndex > self.length - self.showNum + self.focusIndex) {
						targetIndex = self.length -(self.showNum - self.focusIndex);
					}
				}
				return targetIndex -self.focusIndex;
			}
		}


	    return {
	        TabWidget: function (args) {return new TabWidget(args)},
	        Dialog: function (args) {return new Dialog(args)},
	        easyMove: function (dom, args) { return new easyMove(dom, args)}
	    }
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))

/***/ }

});